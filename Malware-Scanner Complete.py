# Michael Betre
# A program that scans a directory for malware and removes it. Uses a list of malware signatures and behavior anomalies to detect malware. 
# If malware is detected, the program will delete the file and terminate the process. 

# Import necessary modules
import tkinter as tk
import os 
import subprocess
import sys
sys.path.append(r'C:\Users\micha\AppData\Roaming\Python\Python311\site-packages')
import psutil

# Define a list of malware signature
MALWARE_SIGNATURES = [
    "adware",
    "backdoor",
    "bot",
    "browser hijacker",
    "coin miner",
    "cryptojacking",
    "fileless malware",
    "keylogger",
    "malware",
    "phishing",
    "ransomware",
    "rootkit",
    "spyware",
    "trojan",
    "virus",
    "worm"
]


def scan_file(filename): 
    """
    Scan a file for malware signatures.
    Returns True if malware is detected, False otherwise.
    """
    with open(filename, 'rb') as f: # Open the file in binary mode
        while True: 
            content = f.read(4096) # Read 4KB at a time
            if not content: # If we've reached the end of the file,
                break
            for signature in MALWARE_SIGNATURES: # Check for malware signatures
                if signature.encode() in content.lower(): # If a signature is found, return True
                    return True
    return False

def scan_directory(path, result_text):
    """
    Recursively scan a directory for malware signatures and behavior anomalies.
    Prints the path of any detected malware files or suspicious processes.
    """
    result_text.insert(tk.END, f"Scanning directory: {path}\n") 
    for root, _, files in os.walk(path): # Walk through the directory
        for filename in files: # Check each file for malware signatures
            full_path = os.path.join(root, filename) # Get the full path of the file
            if scan_file(full_path):  # If malware is detected, print the path of the file
                result_text.insert(tk.END, f"Detected malware in file: {full_path}\n")
        for proc in psutil.process_iter(['name', 'pid']): # Check each process for malware signatures
            try:
                process_name = proc.info['name'] # Get the name of the process
                pid = proc.info['pid'] # Get the PID of the process
                if process_name in MALWARE_SIGNATURES: # If a signature is found, print the name and PID of the process
                    result_text.insert(tk.END, f"Detected suspicious process: {process_name} (PID: {pid})\n")
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess): # If we don't have permission to access the process, skip it
                pass

def delete_file(filename):
    """
    Delete a file from the filesystem.
    """
    os.remove(filename)
    print(f"Deleted file: {filename}") # Print the path of the deleted file

def terminate_process(pid):
    """
    Terminate a process with a given PID.
    """
    subprocess.call(['kill', str(pid)])
    print(f"Terminated process with PID: {pid}") # Print the PID of the terminated process

def remove_malware(path, result_text):
    """
    Recursively scan a directory for malware signatures and behavior anomalies and remove any detected malware files or suspicious processes.
    """
    result_text.insert(tk.END, f"Removing malware from directory: {path}\n")
    for root, _, files in os.walk(path): # Walk through the directory
        for filename in files: # Check each file for malware signatures
            full_path = os.path.join(root, filename) # Get the full path of the file
            if scan_file(full_path): # If malware is detected, delete the file
                delete_file(full_path)
                result_text.insert(tk.END, f"Deleted file: {full_path}\n")
        for proc in psutil.process_iter(['name', 'pid']): # Check each process for malware signatures
            try:
                process_name = proc.info['name'] # Get the name of the process
                pid = proc.info['pid'] # Get the PID of the process
                if process_name in MALWARE_SIGNATURES: # If a signature is found, terminate the process
                    terminate_process(pid)
                    result_text.insert(tk.END, f"Terminated process with PID: {pid}\n")
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess): # If we don't have permission to access the process, skip it
                pass

def on_scan_button_click(): # This function is called when the scan button is clicked
    path = path_entry.get() # Get the path from the path entry
    scan_directory(path, result_text)

def on_remove_button_click(): # This function is called when the remove button is clicked
    path = path_entry.get() # Get the path from the path entry
    remove_malware(path, result_text)

# Create the main window
root = tk.Tk()
root.title("Malware Scanner") # Set the title of the window

# Create the path input label and entry
path_label = tk.Label(root, text="Enter the path to the directory you want to scan:")
path_label.pack()  # Add the label to the window
path_entry = tk.Entry(root)  # Create the entry
path_entry.pack() # Add the entry to the window

# Create the scan button
scan_button = tk.Button(root, text="Scan", command=on_scan_button_click)
scan_button.pack() # Add the button to the window

# Create the remove button
remove_button = tk.Button(root, text="Remove Malware", command=on_remove_button_click)
remove_button.pack() # Add the button to the window

# Create the result text box
result_text = tk.Text(root) # Create the text box
result_text.pack() # Add the text box to the window

# Start the main event loop
root.mainloop() # This function does not return until the main window is closed


